diff --git a/node_modules/@ui-kitten/components/devsupport/components/measure/measure.component.js b/node_modules/@ui-kitten/components/devsupport/components/measure/measure.component.js
index 02180f9..c952313 100644
--- a/node_modules/@ui-kitten/components/devsupport/components/measure/measure.component.js
+++ b/node_modules/@ui-kitten/components/devsupport/components/measure/measure.component.js
@@ -36,13 +36,18 @@ const type_1 = require("./type");
  * but `force` property may be used to measure any time it's needed.
  * DON'T USE THIS FLAG IF THE COMPONENT RENDERS FIRST TIME OR YOU KNOW `onLayout` WILL BE CALLED.
  */
-const MeasureElement = (props) => {
+const MeasureElement = ({
+    force = false,
+    shouldUseTopInsets = false,
+    onMeasure,
+    children
+  }) => {
     const ref = react_1.default.useRef();
     const bindToWindow = (frame, window) => {
         if (frame.origin.x < window.size.width) {
             return frame;
         }
-        const boundFrame = new type_1.Frame(frame.origin.x - window.size.width, frame.origin.y, frame.size.width, frame.size.height);
+        const boundFrame = new type_1.Frame(frame.origin.x - window.size.width, frame.origin.y, Math.round(frame.size.width), Math.round(frame.size.height));
         return bindToWindow(boundFrame, window);
     };
     const onUIManagerMeasure = (x, y, w, h) => {
@@ -50,22 +55,19 @@ const MeasureElement = (props) => {
             measureSelf();
         }
         else {
-            const originY = props.shouldUseTopInsets ? y + react_native_1.StatusBar.currentHeight || 0 : y;
-            const frame = bindToWindow(new type_1.Frame(x, originY, w, h), type_1.Frame.window());
-            props.onMeasure(frame);
+            const originY = shouldUseTopInsets ? y + react_native_1.StatusBar.currentHeight || 0 : y;
+            const frame = bindToWindow(new type_1.Frame(x, originY, Math.round(w), Math.round(h)), type_1.Frame.window());
+            onMeasure(frame);
         }
     };
     const measureSelf = () => {
         const node = (0, react_native_1.findNodeHandle)(ref.current);
-        react_native_1.UIManager.measureInWindow(node, onUIManagerMeasure);
+        if (node) react_native_1.UIManager.measureInWindow(node, onUIManagerMeasure);
     };
-    if (props.force) {
+    if (force) {
         measureSelf();
     }
-    return react_1.default.cloneElement(props.children, { ref, onLayout: measureSelf });
+    return react_1.default.cloneElement(children, { ref, onLayout: measureSelf });
 };
 exports.MeasureElement = MeasureElement;
-exports.MeasureElement.defaultProps = {
-    shouldUseTopInsets: false,
-};
 //# sourceMappingURL=measure.component.js.map
\ No newline at end of file
diff --git a/node_modules/@ui-kitten/components/ui/card/card.component.js b/node_modules/@ui-kitten/components/ui/card/card.component.js
index 76b57a3..5afc03f 100644
--- a/node_modules/@ui-kitten/components/ui/card/card.component.js
+++ b/node_modules/@ui-kitten/components/ui/card/card.component.js
@@ -70,7 +70,7 @@ let Card = class Card extends react_1.default.Component {
             container: containerParameters,
             body: {
                 paddingVertical: bodyPaddingVertical,
-                paddingHorizontal: bodyPaddingHorizontal,
+                paddingHorizontal: 0,
             },
             accent: {
                 height: accentHeight,
@@ -87,21 +87,21 @@ let Card = class Card extends react_1.default.Component {
         };
     };
     renderStatusAccent = (evaStyle) => {
-        return (<react_native_1.View style={evaStyle}/>);
+        return (<react_native_1.View style={evaStyle} />);
     };
     render() {
         const { eva, style, children, accent, header, footer, ...touchableProps } = this.props;
         const evaStyle = this.getComponentStyle(eva.style);
         return (<devsupport_1.TouchableWeb {...touchableProps} style={[styles.container, evaStyle.container, style]} onPressIn={this.onPressIn} onPressOut={this.onPressOut}>
-        <devsupport_1.FalsyFC style={evaStyle.accent} fallback={this.renderStatusAccent(evaStyle.accent)} component={accent}/>
-        <devsupport_1.FalsyFC style={[styles.transparent, evaStyle.header]} component={header}/>
-        {header && <divider_component_1.Divider />}
-        <react_native_1.View style={[styles.content, evaStyle.body]}>
-          {children}
-        </react_native_1.View>
-        {footer && <divider_component_1.Divider />}
-        <devsupport_1.FalsyFC style={[styles.transparent, evaStyle.footer]} component={footer}/>
-      </devsupport_1.TouchableWeb>);
+            <devsupport_1.FalsyFC style={evaStyle.accent} fallback={this.renderStatusAccent(evaStyle.accent)} component={accent} />
+            <devsupport_1.FalsyFC style={[styles.transparent, evaStyle.header]} component={header} />
+            {header && <divider_component_1.Divider />}
+            <react_native_1.View style={[styles.content, evaStyle.body]}>
+                {children}
+            </react_native_1.View>
+            {footer && <divider_component_1.Divider />}
+            <devsupport_1.FalsyFC style={[styles.transparent, evaStyle.footer]} component={footer} />
+        </devsupport_1.TouchableWeb>);
     }
 };
 Card = __decorate([
